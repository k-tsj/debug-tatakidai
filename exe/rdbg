#!/usr/bin/env ruby

require 'optparse'

config = {
  mode: :start
}

opt = OptionParser.new do |o|
  o.banner = "#{$0} [options] -- [debuggee options]"
  o.separator ''

  o.separator 'Start debuggee mode:'
  o.on('-n', '--no-stop', 'Do not stop at the beggining of the script.') do
    conifg[:no_stop]
  end
  o.on('-r', '--remote', 'Start debuggee with the remote debugger attachable.',
                         'If TCP/IP options are not given,',
                         'a UNIX domain socket will be used.') do
    config[:remote] = true
  end
  o.on('--port=[PORT]', 'Listening TCP/IP port') do |port|
    config[:port] = port
  end
  o.on('--host=[HOST]', 'Listening TCP/IP host') do |host|
    config[:host] = host
  end

  o.separator ''
  o.separator "  '#{$0} target.rb foo bar' start like 'ruby target.rb foo bar'."
  o.separator "  '#{$0} -- -r foo -e bar' start like 'ruby -r foo -e bar'."
  o.separator "  '#{$0} -r target.rb foo bar' accept attaching with UNIX domain socket."
  o.separator "  '#{$0} -r --port 1234 target.rb foo bar' accepts attaching with TCP/IP localhost:1234."

  o.separator ''
  o.separator 'Attach mode:'
  o.on('--attach', 'Attach to debuggee process.') do
    config[:mode] = :attach
  end

  o.separator ''
  o.separator "  '#{$0} --attach' tries to connect a UNIX domain socket."
  o.separator "  #{' ' * $0.size}            If there are multiple processes are waiting for connections,"
  o.separator "  #{' ' * $0.size}            list possible debuggee names."
  o.separator "  '#{$0} --attach path' tries to connect a path UNIX domain socket."
  o.separator "  '#{$0} --attach port' tries to connect localhost:port via TCP/IP."
  o.separator "  '#{$0} --attach host port' tris to connect host:port via TCP/IP."
end

opt.parse!(ARGV)

case config[:mode]
when :start
  require 'rbconfig'
  if config[:remote]
    if config[:port]
      ENV['RUBY_DEBUG_PORT'] = config[:port]
      ENV['RUBY_DEBUG_HOST'] = config[:host]
      start_mode = "debug/tcpserver"
    else
      start_mode = "debug/unixserver"
    end
  else
    start_mode = "debug/repl"
  end
  exec("#{RbConfig.ruby}", "-I#{File.expand_path(File.dirname(__dir__))}/lib", "-r" + start_mode, *ARGV)
when :attach
  require_relative "../lib/debug/client"
  begin
    connect ARGV
  rescue DEBUGGER__::CommandLineOptionError
    puts opt.help
  end
else
  raise # assert
end
